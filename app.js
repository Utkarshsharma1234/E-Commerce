require("dotenv").config();
const express = require('express')
const app = express();
const bodyParser = require('body-parser')
const path = require('path')
// const mongoConnect = require('./utils/database').mongoConnect;    // agar waaps se mongodb driver ka code use krna h toh isko uncomment krke use kro.
const User = require('./model/user');
const noPageExist = require('./controllers/404')
const mongoose = require('mongoose');    // directly connection setup krne me help krta h without needing the database file further.
const session = require('express-session');
const MongoDBStore = require('connect-mongodb-session')(session);
const MONGODB_URI = 'mongodb+srv://Utkarsharma:Utkarsh%40123@newcluster.qjhysui.mongodb.net/?retryWrites=true&w=majority'
const csrf = require('csurf');
const flash = require('connect-flash');
const multer = require('multer');
const port = process.env.PORT || 3000;

const isAuth = require('./middleware/is-auth')
const shopController = require('./controllers/shop')

const store = new MongoDBStore({      // here we are creating the store in mongodb where we would be storing the sessions for different requests.
    uri : process.env.MONGO_URL,
    collection : 'sessions'
})

const csrfProtection = csrf();

// helps multer to store the file at the given destination and with a given filename.
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const filePath = path.join(__dirname, `./images`);
    cb(null, filePath);
},
  filename: (req, file, cb) => {
    cb(null, new Date().toISOString + '-' + file.originalname)
  }
})

const fileFilter = (req,file,cb) =>{

  if(file.mimetype === 'image/png' || file.mimetype === 'image/jpg' || file.mimetype === 'image/jpeg'){
    cb(null,true);
  }
  else{
    cb(null,false);
  }
  
}
// setting the template engine to ejs.
app.set('view engine', 'ejs');
app.set('views', 'views');


const adminroutes = require('./routes/admin');
const shopRoutes = require('./routes/shop');
const authRoutes = require('./routes/auth');


// below line is used  to read the request body.
app.use(bodyParser.urlencoded({extended : false}));     // helps us to read the text body from the request generated by the user.
app.use(multer({storage : storage, fileFilter : fileFilter}).single('image'));
app.use(express.static(path.join(__dirname, 'public')))  
// app.use('/admin',express.static(path.join(__dirname, 'public')))  
app.use('/E:/Skills/Web%20Development/Backend%20Shop%20Application/images',express.static(path.join(__dirname, 'images')))  
app.use(session(
    {                           // here we are initializing the store and setting it up equal to the store in mongodb.
     secret : 'my secret',
     resave : false,
     saveUninitialized : false,
     store : store
    }
));


app.use(flash());

app.use((req, res, next) => {
    if (!req.session.user) {   // these lines handle any error if no session is registered by any user.
      return next();
    }
    User.findById(req.session.user._id)
      .then(user => {
        if(!user){          // here we are still checking that whether the user exists or not because if in between the session the user is deleted in database then it may throw error so its better to handle this error.
          return next();
        }
        req.user = user;
        next();
      })
      .catch(err => {
        // throw new Error(err);  this will not work because it is asynchronous
        next(new Error(err));    // this will work here.
      });
  });


  // the below function helps us to pass the two arguements in every function in the controllers and they will be rendered with all the views.
app.use((req,res,next) =>{    
    res.locals.isAuthenticated = req.session.isLoggedIn;
    next();
})

// ab hum routing kr rhe h
app.post('/create-order',isAuth,shopController.postOrder);    // stripe khud ka ek token generate kr leta h kiski wajah se uskom csrf token ki jaroorat nhi padti toh hum isliye iss route ko app.js me leke aaye h.

app.use(csrfProtection); // isko hum /create-order waale route ke neeche place kr rhe h so that it doesn't check for the csrf token in that route.

app.use((req,res,next) =>{    
  res.locals.csrfToken = req.csrfToken();
  next();
})

app.use('/admin',adminroutes);        // "/admin" confirms that the routes starting with '/admin' will only be accounted under the adminroutes route and the url in the adminroutes will be stating like '/admin/...'          // yaha pe humne jo adminroutes me url h unko access diya h and order abhi bhi same hi h because pehle yeh waale middleware chalne chahiye aur fir uske baad agar kuch bhi nhi aaya tab jaake sirf '/' waala run hona chahiye.
app.use(shopRoutes);                  // shoproutes me jaao aur agar koi url request ke url se match krta h toh usko render kr do.
app.use(authRoutes);

app.get('/500', noPageExist.get500);

// page not found ke liye
app.use(noPageExist.pageNotFound)


// SPECIAL MIDDLEWARE -> if the code is synchronous then this will be called if we use "throw new Error()" but for the asynchronous code this will be executed if we use it like "next(throw new Error())"
app.use((error,req,res,next)=>{        // this is a special middleware which is registered when a next is called with error in it. next(error).
  console.log(error);
  res.redirect('/500');
})

mongoose.connect(`${process.env.MONGO_URL}`)
        .then(result =>{
            console.log('Connected to the Server!');  
            app.listen(port);
        })
        .catch(err =>{
            console.log(err);
        })


// >>>>>> THE BELOW CODE CONNECTS TO THE DATABASE USING THE MONGODB DRIVER ITSELF BUT WITH THE HELP OF MONGOOSE WE CAN DO IT DIRECTLY.
// mongoConnect((client)=>{
//     app.listen(3000,()=>{
//         console.log('app has been started!');
//     });
// })

// app.listen(3000,()=>{                  // isme {const server = http.createServer(app)} yeh waali line covered hoti h aur const http = require('http') yeh waali bhi included hoti h
//     console.log('port has been started at 3000')
// })



// Important Notes :

// 1. path.join(__dirname, './', 'views', '404.html') -->> yeh humare views folder me jaake check krega ki 404.html file h kya aur milte hi render kr degi.
// 2. /admin lagane se yeh app.use('/admin') waala middleware sirf tab hi render hoga jab url me "/admin" milega otherwise nhi hoga.
// 3. "app.use(express.static(path.join(__dirname, 'public')))" -->> agar hum kahi pe bhi .css ya .js jaisi files ko access krna chahte h toh express hume public folder me redirect kr dega aur jo bhi file hume chahiye woh de dega.
// 4. adminData me se 2 cheeze export ho rhi h toh unhe access krne ke liye hum adminData.routes and adminData.products aise krke use krenge.
// 5. app.set('views','views') se hum log yeh bta rhe h ki humari template r=engine waali files ko kaha pe search krna h. agar humare views folder ka naam utkarsh hota toh hum log jo second waala views likha hua h usko replace krte with views.
// 6. templating engine set krne se aur uska folder define krne se agar hum res.render() ka use krenge toh express automatically views folder me jaake uss particular file ko dekhega jo ki .ejs se khtm hoti h aur usko render kr dega.
// 7. res.render() me hum jo bhi file specify krenge toh humne templating engine jisko bhi set kiya hoga express ussi templating engine ki same name waali file ko views me search kregi aur milte hi render kr degi.
// 8. sequelize.sync() is used to change all the model files into tables basically all those tables which have been created by sequelize.define().


// Important Note :   yeh includes folder me aur ejs files me layouts ko set krne ke liye h.

// 1. <%- include('includes/head.ejs') %> isse hum includes folder me jaake udhar se saara header me jo bhi code aayega usko carry kr rhe h aur yaha pe use kr rhe h.
// 2. The main difference between <%=%> and <%-%> is that equal sign waala hume actual value render krne me help krta h as a plain text aur minus waala jo h woh hume html files ko use krne me help krta h.
// 3.  <%- include('includes/navigation_bar.ejs') isse hum includes folder me jaake udhar se navigation me jo bhi code likha hua h usko copy krke yaha pe laa rhe h.
// 4. <%- include('includes/end.ejs') %> isse hum includes folder me end.ejs me jaayenge aur waha ka code copy krke le aayenge.
// 5. Mongoose allows us to setup the connection to the database directly and we don't need the database file further instead we can directly connect to the database.